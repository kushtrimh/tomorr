/*
 * This file is generated by jOOQ.
 */
package com.kushtrimh.tomorr.dal.tables;


import com.kushtrimh.tomorr.dal.Keys;
import com.kushtrimh.tomorr.dal.Public;
import com.kushtrimh.tomorr.dal.tables.records.QrtzLocksRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QrtzLocks extends TableImpl<QrtzLocksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.qrtz_locks</code>
     */
    public static final QrtzLocks QRTZ_LOCKS = new QrtzLocks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzLocksRecord> getRecordType() {
        return QrtzLocksRecord.class;
    }

    /**
     * The column <code>public.qrtz_locks.sched_name</code>.
     */
    public final TableField<QrtzLocksRecord, String> SCHED_NAME = createField(DSL.name("sched_name"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_locks.lock_name</code>.
     */
    public final TableField<QrtzLocksRecord, String> LOCK_NAME = createField(DSL.name("lock_name"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    private QrtzLocks(Name alias, Table<QrtzLocksRecord> aliased) {
        this(alias, aliased, null);
    }

    private QrtzLocks(Name alias, Table<QrtzLocksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.qrtz_locks</code> table reference
     */
    public QrtzLocks(String alias) {
        this(DSL.name(alias), QRTZ_LOCKS);
    }

    /**
     * Create an aliased <code>public.qrtz_locks</code> table reference
     */
    public QrtzLocks(Name alias) {
        this(alias, QRTZ_LOCKS);
    }

    /**
     * Create a <code>public.qrtz_locks</code> table reference
     */
    public QrtzLocks() {
        this(DSL.name("qrtz_locks"), null);
    }

    public <O extends Record> QrtzLocks(Table<O> child, ForeignKey<O, QrtzLocksRecord> key) {
        super(child, key, QRTZ_LOCKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<QrtzLocksRecord> getPrimaryKey() {
        return Keys.QRTZ_LOCKS_PKEY;
    }

    @Override
    public List<UniqueKey<QrtzLocksRecord>> getKeys() {
        return Arrays.<UniqueKey<QrtzLocksRecord>>asList(Keys.QRTZ_LOCKS_PKEY);
    }

    @Override
    public QrtzLocks as(String alias) {
        return new QrtzLocks(DSL.name(alias), this);
    }

    @Override
    public QrtzLocks as(Name alias) {
        return new QrtzLocks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzLocks rename(String name) {
        return new QrtzLocks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzLocks rename(Name name) {
        return new QrtzLocks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
