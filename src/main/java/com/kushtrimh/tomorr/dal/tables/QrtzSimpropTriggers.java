/*
 * This file is generated by jOOQ.
 */
package com.kushtrimh.tomorr.dal.tables;


import com.kushtrimh.tomorr.dal.Keys;
import com.kushtrimh.tomorr.dal.Public;
import com.kushtrimh.tomorr.dal.tables.records.QrtzSimpropTriggersRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class QrtzSimpropTriggers extends TableImpl<QrtzSimpropTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.qrtz_simprop_triggers</code>
     */
    public static final QrtzSimpropTriggers QRTZ_SIMPROP_TRIGGERS = new QrtzSimpropTriggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzSimpropTriggersRecord> getRecordType() {
        return QrtzSimpropTriggersRecord.class;
    }

    /**
     * The column <code>public.qrtz_simprop_triggers.sched_name</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> SCHED_NAME = createField(DSL.name("sched_name"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.trigger_name</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> TRIGGER_NAME = createField(DSL.name("trigger_name"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.trigger_group</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> TRIGGER_GROUP = createField(DSL.name("trigger_group"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.str_prop_1</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> STR_PROP_1 = createField(DSL.name("str_prop_1"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.str_prop_2</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> STR_PROP_2 = createField(DSL.name("str_prop_2"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.str_prop_3</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> STR_PROP_3 = createField(DSL.name("str_prop_3"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.int_prop_1</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, Integer> INT_PROP_1 = createField(DSL.name("int_prop_1"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.int_prop_2</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, Integer> INT_PROP_2 = createField(DSL.name("int_prop_2"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.long_prop_1</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, Long> LONG_PROP_1 = createField(DSL.name("long_prop_1"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.long_prop_2</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, Long> LONG_PROP_2 = createField(DSL.name("long_prop_2"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.dec_prop_1</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, BigDecimal> DEC_PROP_1 = createField(DSL.name("dec_prop_1"), SQLDataType.NUMERIC(13, 4), this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.dec_prop_2</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, BigDecimal> DEC_PROP_2 = createField(DSL.name("dec_prop_2"), SQLDataType.NUMERIC(13, 4), this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.bool_prop_1</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, Boolean> BOOL_PROP_1 = createField(DSL.name("bool_prop_1"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.qrtz_simprop_triggers.bool_prop_2</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, Boolean> BOOL_PROP_2 = createField(DSL.name("bool_prop_2"), SQLDataType.BOOLEAN, this, "");

    private QrtzSimpropTriggers(Name alias, Table<QrtzSimpropTriggersRecord> aliased) {
        this(alias, aliased, null);
    }

    private QrtzSimpropTriggers(Name alias, Table<QrtzSimpropTriggersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.qrtz_simprop_triggers</code> table reference
     */
    public QrtzSimpropTriggers(String alias) {
        this(DSL.name(alias), QRTZ_SIMPROP_TRIGGERS);
    }

    /**
     * Create an aliased <code>public.qrtz_simprop_triggers</code> table reference
     */
    public QrtzSimpropTriggers(Name alias) {
        this(alias, QRTZ_SIMPROP_TRIGGERS);
    }

    /**
     * Create a <code>public.qrtz_simprop_triggers</code> table reference
     */
    public QrtzSimpropTriggers() {
        this(DSL.name("qrtz_simprop_triggers"), null);
    }

    public <O extends Record> QrtzSimpropTriggers(Table<O> child, ForeignKey<O, QrtzSimpropTriggersRecord> key) {
        super(child, key, QRTZ_SIMPROP_TRIGGERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<QrtzSimpropTriggersRecord> getPrimaryKey() {
        return Keys.QRTZ_SIMPROP_TRIGGERS_PKEY;
    }

    @Override
    public List<UniqueKey<QrtzSimpropTriggersRecord>> getKeys() {
        return Arrays.<UniqueKey<QrtzSimpropTriggersRecord>>asList(Keys.QRTZ_SIMPROP_TRIGGERS_PKEY);
    }

    @Override
    public List<ForeignKey<QrtzSimpropTriggersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QrtzSimpropTriggersRecord, ?>>asList(Keys.QRTZ_SIMPROP_TRIGGERS__QRTZ_SIMPROP_TRIGGERS_SCHED_NAME_TRIGGER_NAME_TRIGGER_GROU_FKEY);
    }

    private transient QrtzTriggers _qrtzTriggers;

    public QrtzTriggers qrtzTriggers() {
        if (_qrtzTriggers == null)
            _qrtzTriggers = new QrtzTriggers(this, Keys.QRTZ_SIMPROP_TRIGGERS__QRTZ_SIMPROP_TRIGGERS_SCHED_NAME_TRIGGER_NAME_TRIGGER_GROU_FKEY);

        return _qrtzTriggers;
    }

    @Override
    public QrtzSimpropTriggers as(String alias) {
        return new QrtzSimpropTriggers(DSL.name(alias), this);
    }

    @Override
    public QrtzSimpropTriggers as(Name alias) {
        return new QrtzSimpropTriggers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSimpropTriggers rename(String name) {
        return new QrtzSimpropTriggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSimpropTriggers rename(Name name) {
        return new QrtzSimpropTriggers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, String, String, String, Integer, Integer, Long, Long, BigDecimal, BigDecimal, Boolean, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
