/*
 * This file is generated by jOOQ.
 */
package com.kushtrimh.tomorr.dal.tables;


import com.kushtrimh.tomorr.dal.Keys;
import com.kushtrimh.tomorr.dal.Public;
import com.kushtrimh.tomorr.dal.tables.records.ArtistAppUserRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ArtistAppUser extends TableImpl<ArtistAppUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.artist_app_user</code>
     */
    public static final ArtistAppUser ARTIST_APP_USER = new ArtistAppUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtistAppUserRecord> getRecordType() {
        return ArtistAppUserRecord.class;
    }

    /**
     * The column <code>public.artist_app_user.artist_id</code>.
     */
    public final TableField<ArtistAppUserRecord, String> ARTIST_ID = createField(DSL.name("artist_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.artist_app_user.app_user_id</code>.
     */
    public final TableField<ArtistAppUserRecord, String> APP_USER_ID = createField(DSL.name("app_user_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private ArtistAppUser(Name alias, Table<ArtistAppUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArtistAppUser(Name alias, Table<ArtistAppUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.artist_app_user</code> table reference
     */
    public ArtistAppUser(String alias) {
        this(DSL.name(alias), ARTIST_APP_USER);
    }

    /**
     * Create an aliased <code>public.artist_app_user</code> table reference
     */
    public ArtistAppUser(Name alias) {
        this(alias, ARTIST_APP_USER);
    }

    /**
     * Create a <code>public.artist_app_user</code> table reference
     */
    public ArtistAppUser() {
        this(DSL.name("artist_app_user"), null);
    }

    public <O extends Record> ArtistAppUser(Table<O> child, ForeignKey<O, ArtistAppUserRecord> key) {
        super(child, key, ARTIST_APP_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ArtistAppUserRecord> getPrimaryKey() {
        return Keys.ARTIST_APP_USER_PKEY;
    }

    @Override
    public List<UniqueKey<ArtistAppUserRecord>> getKeys() {
        return Arrays.<UniqueKey<ArtistAppUserRecord>>asList(Keys.ARTIST_APP_USER_PKEY);
    }

    @Override
    public ArtistAppUser as(String alias) {
        return new ArtistAppUser(DSL.name(alias), this);
    }

    @Override
    public ArtistAppUser as(Name alias) {
        return new ArtistAppUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistAppUser rename(String name) {
        return new ArtistAppUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtistAppUser rename(Name name) {
        return new ArtistAppUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
