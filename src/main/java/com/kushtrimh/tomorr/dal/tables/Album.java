/*
 * This file is generated by jOOQ.
 */
package com.kushtrimh.tomorr.dal.tables;


import com.kushtrimh.tomorr.dal.Keys;
import com.kushtrimh.tomorr.dal.Public;
import com.kushtrimh.tomorr.dal.tables.records.AlbumRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Album extends TableImpl<AlbumRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.album</code>
     */
    public static final Album ALBUM = new Album();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumRecord> getRecordType() {
        return AlbumRecord.class;
    }

    /**
     * The column <code>public.album.id</code>.
     */
    public final TableField<AlbumRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.album.name</code>.
     */
    public final TableField<AlbumRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>public.album.total_tracks</code>.
     */
    public final TableField<AlbumRecord, Integer> TOTAL_TRACKS = createField(DSL.name("total_tracks"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.album.image_href</code>.
     */
    public final TableField<AlbumRecord, String> IMAGE_HREF = createField(DSL.name("image_href"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.album.type</code>.
     */
    public final TableField<AlbumRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.album.release_date</code>.
     */
    public final TableField<AlbumRecord, String> RELEASE_DATE = createField(DSL.name("release_date"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.album.created_at</code>.
     */
    public final TableField<AlbumRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private Album(Name alias, Table<AlbumRecord> aliased) {
        this(alias, aliased, null);
    }

    private Album(Name alias, Table<AlbumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.album</code> table reference
     */
    public Album(String alias) {
        this(DSL.name(alias), ALBUM);
    }

    /**
     * Create an aliased <code>public.album</code> table reference
     */
    public Album(Name alias) {
        this(alias, ALBUM);
    }

    /**
     * Create a <code>public.album</code> table reference
     */
    public Album() {
        this(DSL.name("album"), null);
    }

    public <O extends Record> Album(Table<O> child, ForeignKey<O, AlbumRecord> key) {
        super(child, key, ALBUM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AlbumRecord> getPrimaryKey() {
        return Keys.ALBUM_PKEY;
    }

    @Override
    public List<UniqueKey<AlbumRecord>> getKeys() {
        return Arrays.<UniqueKey<AlbumRecord>>asList(Keys.ALBUM_PKEY);
    }

    @Override
    public Album as(String alias) {
        return new Album(DSL.name(alias), this);
    }

    @Override
    public Album as(Name alias) {
        return new Album(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(String name) {
        return new Album(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(Name name) {
        return new Album(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, Integer, String, String, String, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
