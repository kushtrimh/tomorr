/*
 * This file is generated by jOOQ.
 */
package com.kushtrimh.tomorr.dal.tables.records;


import com.kushtrimh.tomorr.dal.tables.Album;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Entity
@Table(
        name = "album",
        schema = "public",
        uniqueConstraints = {
                @UniqueConstraint(name = "album_pkey", columnNames = {"id"})
        }
)
public class AlbumRecord extends UpdatableRecordImpl<AlbumRecord> implements Record7<String, String, Integer, String, String, String, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.album.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.album.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, length = 32)
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.album.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.album.name</code>.
     */
    @Column(name = "name", nullable = false, length = 512)
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.album.total_tracks</code>.
     */
    public void setTotalTracks(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.album.total_tracks</code>.
     */
    @Column(name = "total_tracks", nullable = false, precision = 32)
    public Integer getTotalTracks() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.album.image_href</code>.
     */
    public void setImageHref(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.album.image_href</code>.
     */
    @Column(name = "image_href", nullable = false, length = 256)
    public String getImageHref() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.album.type</code>.
     */
    public void setType(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.album.type</code>.
     */
    @Column(name = "type", nullable = false, length = 32)
    public String getType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.album.release_date</code>.
     */
    public void setReleaseDate(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.album.release_date</code>.
     */
    @Column(name = "release_date", nullable = false, length = 64)
    public String getReleaseDate() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.album.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.album.created_at</code>.
     */
    @Column(name = "created_at", nullable = false, precision = 6)
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, Integer, String, String, String, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, String, Integer, String, String, String, LocalDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Album.ALBUM.ID;
    }

    @Override
    public Field<String> field2() {
        return Album.ALBUM.NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Album.ALBUM.TOTAL_TRACKS;
    }

    @Override
    public Field<String> field4() {
        return Album.ALBUM.IMAGE_HREF;
    }

    @Override
    public Field<String> field5() {
        return Album.ALBUM.TYPE;
    }

    @Override
    public Field<String> field6() {
        return Album.ALBUM.RELEASE_DATE;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Album.ALBUM.CREATED_AT;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer component3() {
        return getTotalTracks();
    }

    @Override
    public String component4() {
        return getImageHref();
    }

    @Override
    public String component5() {
        return getType();
    }

    @Override
    public String component6() {
        return getReleaseDate();
    }

    @Override
    public LocalDateTime component7() {
        return getCreatedAt();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Integer value3() {
        return getTotalTracks();
    }

    @Override
    public String value4() {
        return getImageHref();
    }

    @Override
    public String value5() {
        return getType();
    }

    @Override
    public String value6() {
        return getReleaseDate();
    }

    @Override
    public LocalDateTime value7() {
        return getCreatedAt();
    }

    @Override
    public AlbumRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public AlbumRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AlbumRecord value3(Integer value) {
        setTotalTracks(value);
        return this;
    }

    @Override
    public AlbumRecord value4(String value) {
        setImageHref(value);
        return this;
    }

    @Override
    public AlbumRecord value5(String value) {
        setType(value);
        return this;
    }

    @Override
    public AlbumRecord value6(String value) {
        setReleaseDate(value);
        return this;
    }

    @Override
    public AlbumRecord value7(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public AlbumRecord values(String value1, String value2, Integer value3, String value4, String value5, String value6, LocalDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlbumRecord
     */
    public AlbumRecord() {
        super(Album.ALBUM);
    }

    /**
     * Create a detached, initialised AlbumRecord
     */
    public AlbumRecord(String id, String name, Integer totalTracks, String imageHref, String type, String releaseDate, LocalDateTime createdAt) {
        super(Album.ALBUM);

        setId(id);
        setName(name);
        setTotalTracks(totalTracks);
        setImageHref(imageHref);
        setType(type);
        setReleaseDate(releaseDate);
        setCreatedAt(createdAt);
    }
}
