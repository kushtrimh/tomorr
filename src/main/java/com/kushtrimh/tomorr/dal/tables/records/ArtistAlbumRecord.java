/*
 * This file is generated by jOOQ.
 */
package com.kushtrimh.tomorr.dal.tables.records;


import com.kushtrimh.tomorr.dal.tables.ArtistAlbum;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "artist_album",
    schema = "public"
)
public class ArtistAlbumRecord extends TableRecordImpl<ArtistAlbumRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.artist_album.artist_id</code>.
     */
    public void setArtistId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.artist_album.artist_id</code>.
     */
    @Column(name = "artist_id", nullable = false, length = 32)
    public String getArtistId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.artist_album.album_id</code>.
     */
    public void setAlbumId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.artist_album.album_id</code>.
     */
    @Column(name = "album_id", nullable = false, length = 32)
    public String getAlbumId() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ArtistAlbum.ARTIST_ALBUM.ARTIST_ID;
    }

    @Override
    public Field<String> field2() {
        return ArtistAlbum.ARTIST_ALBUM.ALBUM_ID;
    }

    @Override
    public String component1() {
        return getArtistId();
    }

    @Override
    public String component2() {
        return getAlbumId();
    }

    @Override
    public String value1() {
        return getArtistId();
    }

    @Override
    public String value2() {
        return getAlbumId();
    }

    @Override
    public ArtistAlbumRecord value1(String value) {
        setArtistId(value);
        return this;
    }

    @Override
    public ArtistAlbumRecord value2(String value) {
        setAlbumId(value);
        return this;
    }

    @Override
    public ArtistAlbumRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ArtistAlbumRecord
     */
    public ArtistAlbumRecord() {
        super(ArtistAlbum.ARTIST_ALBUM);
    }

    /**
     * Create a detached, initialised ArtistAlbumRecord
     */
    public ArtistAlbumRecord(String artistId, String albumId) {
        super(ArtistAlbum.ARTIST_ALBUM);

        setArtistId(artistId);
        setAlbumId(albumId);
    }
}
