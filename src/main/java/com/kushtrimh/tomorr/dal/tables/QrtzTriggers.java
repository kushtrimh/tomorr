/*
 * This file is generated by jOOQ.
 */
package com.kushtrimh.tomorr.dal.tables;


import com.kushtrimh.tomorr.dal.Indexes;
import com.kushtrimh.tomorr.dal.Keys;
import com.kushtrimh.tomorr.dal.Public;
import com.kushtrimh.tomorr.dal.tables.records.QrtzTriggersRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QrtzTriggers extends TableImpl<QrtzTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.qrtz_triggers</code>
     */
    public static final QrtzTriggers QRTZ_TRIGGERS = new QrtzTriggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzTriggersRecord> getRecordType() {
        return QrtzTriggersRecord.class;
    }

    /**
     * The column <code>public.qrtz_triggers.sched_name</code>.
     */
    public final TableField<QrtzTriggersRecord, String> SCHED_NAME = createField(DSL.name("sched_name"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_triggers.trigger_name</code>.
     */
    public final TableField<QrtzTriggersRecord, String> TRIGGER_NAME = createField(DSL.name("trigger_name"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_triggers.trigger_group</code>.
     */
    public final TableField<QrtzTriggersRecord, String> TRIGGER_GROUP = createField(DSL.name("trigger_group"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_triggers.job_name</code>.
     */
    public final TableField<QrtzTriggersRecord, String> JOB_NAME = createField(DSL.name("job_name"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_triggers.job_group</code>.
     */
    public final TableField<QrtzTriggersRecord, String> JOB_GROUP = createField(DSL.name("job_group"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_triggers.description</code>.
     */
    public final TableField<QrtzTriggersRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>public.qrtz_triggers.next_fire_time</code>.
     */
    public final TableField<QrtzTriggersRecord, Long> NEXT_FIRE_TIME = createField(DSL.name("next_fire_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.qrtz_triggers.prev_fire_time</code>.
     */
    public final TableField<QrtzTriggersRecord, Long> PREV_FIRE_TIME = createField(DSL.name("prev_fire_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.qrtz_triggers.priority</code>.
     */
    public final TableField<QrtzTriggersRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.qrtz_triggers.trigger_state</code>.
     */
    public final TableField<QrtzTriggersRecord, String> TRIGGER_STATE = createField(DSL.name("trigger_state"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_triggers.trigger_type</code>.
     */
    public final TableField<QrtzTriggersRecord, String> TRIGGER_TYPE = createField(DSL.name("trigger_type"), SQLDataType.VARCHAR(8).nullable(false), this, "");

    /**
     * The column <code>public.qrtz_triggers.start_time</code>.
     */
    public final TableField<QrtzTriggersRecord, Long> START_TIME = createField(DSL.name("start_time"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.qrtz_triggers.end_time</code>.
     */
    public final TableField<QrtzTriggersRecord, Long> END_TIME = createField(DSL.name("end_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.qrtz_triggers.calendar_name</code>.
     */
    public final TableField<QrtzTriggersRecord, String> CALENDAR_NAME = createField(DSL.name("calendar_name"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.qrtz_triggers.misfire_instr</code>.
     */
    public final TableField<QrtzTriggersRecord, Short> MISFIRE_INSTR = createField(DSL.name("misfire_instr"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.qrtz_triggers.job_data</code>.
     */
    public final TableField<QrtzTriggersRecord, byte[]> JOB_DATA = createField(DSL.name("job_data"), SQLDataType.BLOB, this, "");

    private QrtzTriggers(Name alias, Table<QrtzTriggersRecord> aliased) {
        this(alias, aliased, null);
    }

    private QrtzTriggers(Name alias, Table<QrtzTriggersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.qrtz_triggers</code> table reference
     */
    public QrtzTriggers(String alias) {
        this(DSL.name(alias), QRTZ_TRIGGERS);
    }

    /**
     * Create an aliased <code>public.qrtz_triggers</code> table reference
     */
    public QrtzTriggers(Name alias) {
        this(alias, QRTZ_TRIGGERS);
    }

    /**
     * Create a <code>public.qrtz_triggers</code> table reference
     */
    public QrtzTriggers() {
        this(DSL.name("qrtz_triggers"), null);
    }

    public <O extends Record> QrtzTriggers(Table<O> child, ForeignKey<O, QrtzTriggersRecord> key) {
        super(child, key, QRTZ_TRIGGERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_QRTZ_T_C, Indexes.IDX_QRTZ_T_G, Indexes.IDX_QRTZ_T_J, Indexes.IDX_QRTZ_T_JG, Indexes.IDX_QRTZ_T_N_G_STATE, Indexes.IDX_QRTZ_T_N_STATE, Indexes.IDX_QRTZ_T_NEXT_FIRE_TIME, Indexes.IDX_QRTZ_T_NFT_MISFIRE, Indexes.IDX_QRTZ_T_NFT_ST, Indexes.IDX_QRTZ_T_NFT_ST_MISFIRE, Indexes.IDX_QRTZ_T_NFT_ST_MISFIRE_GRP, Indexes.IDX_QRTZ_T_STATE);
    }

    @Override
    public UniqueKey<QrtzTriggersRecord> getPrimaryKey() {
        return Keys.QRTZ_TRIGGERS_PKEY;
    }

    @Override
    public List<UniqueKey<QrtzTriggersRecord>> getKeys() {
        return Arrays.<UniqueKey<QrtzTriggersRecord>>asList(Keys.QRTZ_TRIGGERS_PKEY);
    }

    @Override
    public List<ForeignKey<QrtzTriggersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QrtzTriggersRecord, ?>>asList(Keys.QRTZ_TRIGGERS__QRTZ_TRIGGERS_SCHED_NAME_JOB_NAME_JOB_GROUP_FKEY);
    }

    private transient QrtzJobDetails _qrtzJobDetails;

    public QrtzJobDetails qrtzJobDetails() {
        if (_qrtzJobDetails == null)
            _qrtzJobDetails = new QrtzJobDetails(this, Keys.QRTZ_TRIGGERS__QRTZ_TRIGGERS_SCHED_NAME_JOB_NAME_JOB_GROUP_FKEY);

        return _qrtzJobDetails;
    }

    @Override
    public QrtzTriggers as(String alias) {
        return new QrtzTriggers(DSL.name(alias), this);
    }

    @Override
    public QrtzTriggers as(Name alias) {
        return new QrtzTriggers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzTriggers rename(String name) {
        return new QrtzTriggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzTriggers rename(Name name) {
        return new QrtzTriggers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, String, String, String, String, Long, Long, Integer, String, String, Long, Long, String, Short, byte[]> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
